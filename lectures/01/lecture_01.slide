# Программирование на языке Go

Лекция 1. Введение

## Полезные ссылки

* [Репозиторий с материалами](https://github.com/dbeliakov/mipt-golang-course)
* [Таблица проверки домашних заданий](https://go.dbeliakov.ru)
* [Официальный сайт](https://golang.org/)
* [The Go Playground](https://play.golang.org/)
* [The Go Programming Language](https://www.gopl.io/) (есть на русском языке)

## Отчетность

* Небольшие домашние задания после семинаров (проверяются автоматикой)
* Один или несколько больших проектов (проверяются вручную)
* Коммуникация - через телеграм-чат

## Язык Go

**Go** (часто также **Golang**) — компилируемый многопоточный язык программирования, разработанный внутри компании Google.

Официально язык был представлен в ноябре 2009 года.

Разрабатывался как язык программирования для создания высокоэффективных программ,
работающих на **современных распределённых системах** и **многоядерных процессорах**.

## Язык Go

Среди недостатков других языков, с которыми боролись создатели Go, можно выделить:
* Медленная сборка программ
* Неконтролируемые зависимости
* Сложность языковых конструкций, множество способов решить задачу
* Отсутствие поддержки конкурентных программ на ровне языка, следствие - неудобство разработки
* Затруднения с пониманием программ, вызванные неудобочитаемостью кода, плохим документированием и так далее
* Сложность разработки инструментария

## Язык Go

Основными требованиями к языку стали:
* Ортогональность
* Простая и регулярная грамматика
* Простая работа с типами
* Отсутствие неявных преобразований
* Сборка мусора
* Встроенные средства распараллеливания, простые и эффективные
* Поддержка строк (unicode), ассоциативных массивов и коммуникационных каналов
* Чёткое разделение интерфейса и реализации
* Эффективная система пакетов с явным указанием зависимостей, обеспечивающая быструю сборку

## Язык Go

Возможности языка:
* Строгая статическая типизация
* Полноценная поддержка указателей, но без арифметики
* Строковый тип с поддержкой unicode
* Средства функционального программирования
* Автоматическое управление памятью со сборщиком мусора
* Средства параллельного и конкурентного программирования


## Язык Go

Отличия Go от других популярных языков:
* Отсутствие исключений, явная обработка ошибок (в "стиле C")
* Отсутствие наследования (вместо - вложение типов)
* Отсутствие дженериков (но совсем скоро будут)
* Отсутствует возможность переопределять методы и функции
* Ряд ограничений, приводяций к усложнению или ошибкам: некоторые операции над массивами, поддержка отрицательных индексов, принцип "любое выражение возвращает значение"

## Hello, world

.code code/hello/hello.go

## Echo

.code code/echo/echo.go

## For loop

    for initialization; condition; post {
        // statements
    }

    for condition {
        // statements
    }


    for {
    	// statements
    }


## Echo2

.code code/echo2/echo.go

## Variables

		s := ""
		var s string
		var s = ""
		var s string = ""

Последние два варианта используются редко, в основном - первые два

## Echo3

.code code/echo3/echo.go

## Dup

.code code/dup/main.go

## Formatting

Функции форматирования заканчиваются на `f`. `fmt.Errorf`, `log.Printf`.

		%d         decimal integer
		%x, %o, %b integer in hexade cimal, octal, binary
		%f, %g, %e floating-point number: 3.141593 3.141592653589793 3.141593e+00
		%t         boolean: true or false
		%c         rune (Unicode code point)
		%s         string
		%q         quoted string "abc" or rune 'c'
		%v         any value in a natural format
		%T         type of any value
		%%         literal percent sign (no operand)

## Dup2

.code code/dup2/main.go /^func main/,/^}/

## Dup3

.code code/dup3/main.go /^func main/,/^}/

## Fetch

.code code/fetch/main.go

## FetchAll

.code code/fetchall/main.go /^func main/,/^}/

## FetchAll

.code code/fetchall/main.go /^func fetch/,/^}/